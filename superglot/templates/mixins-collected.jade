

mixin form_field(field, placeholder="", type=None, label=None)
	.form-group(class=('has-error' if field.errors else ''))
		if label
			label(class="control-label" for=field.name)= label
		else
			= field.label(class="control-label")
		if type
			if type == 'email'
				!= field(class="form-control", placeholder=placeholder, type=type, autocorrect='false', autocapitalize='false')
			else
				!= field(class="form-control", placeholder=placeholder, type=type)
		else
			!= field(class="form-control", placeholder=placeholder)
		+formerrors(field)


mixin form_field_raw(field, input)
	.form-group(class=('has-error' if field.errors else ''))
		= field.label(class="control-label")
		!= input
		+formerrors(field)


mixin form_select(field, choices)
	.form-group(class=('has-error' if field.errors else ''))
		= field.label(class="control-label")
		select(name=field.name, class="form-control")
			for value, text in choices
				if value == field.data
					option(value=value, selected=True)= text
				else
					option(value=value)= text
		+formerrors(field)

//- mixin form_select_language(field, choices)
//- 	.form-group(class=('has-error' if field.errors else ''))
//- 		= field.label(class="control-label")
//- 		select(name=field.name, class="form-control")
//- 			for code, name in choices
//- 				option(value=code, style="background-image: url('/static/images/flag-icons/#{ code }.png')")= name
//- 		+formerrors(field)

mixin formerrors(field)
	ul.errors
		for error in field.errors
			li= error


mixin form_submit(value="Submit")
	.form-group.form-submit
		input.btn.btn-primary(type="submit", value=value)



mixin annotated_vocab_word(a_word, reading=None, occurrence=None)
	if reading
		- var text = reading
	elif a_word.reading
		- var text = a_word.reading
	else
		- var text = a_word.word.lemma
	if a_word.rating > 0 and util.now() > a_word.srs_next_repetition
		li.word.due(data-lemma=a_word.word.lemma, data-rating=a_word.rating|int, data-article-position=occurrence.article_position)
			//- div.due-marker
				//- = a_word.srs_next_repetition
			= text
	else
		li.word(data-lemma=a_word.word.lemma, data-rating=a_word.rating|int, data-article-position=occurrence.article_position)
			= text


mixin vocab_table(vocab)
	table.table
		thead
			tr
				th= _("word") | capitalize
				th= _("frequency") | capitalize
		tbody
			for v in vocab
				tr
					td= v.word.lemma
					td= 40

mixin vocab_list_inline(vocab)
	ul.inline-list.annotated-words.style-a
		for v in vocab
			+annotated_vocab_word(v)


mixin grouped_columned_vocab_list(groups)
	ul.vocab-list.grouped.columned
		for key, group in groups
			li.heading= key
			for word in group
				li(data-id=word.id)= word.lemma

mixin simple_vocab_list(vocab)
	ul.vocab-list.simple
		for item in vocab
			li(data-id=item.word.id)= item.word.lemma


mixin old_vocab_list(words)
	if words|length > 100
		+grouped_columned_vocab_list(formatting.alpha_headings(words))
	else
		+simple_vocab_list(words)


mixin vocab_progress_bar(stats)
	.vocab-progress-bar
		.partition.rating-3(style="width: #{ "%2f%%"|format(stats.percents[3]) }")
		.partition.rating-2(style="width: #{ "%2f%%"|format(stats.percents[2]) }")
		.partition.rating-1(style="width: #{ "%2f%%"|format(stats.percents[1]) }")
		//- .partition.other(style="width: #{ "%2f%%"|format(100 - stats.percents.known - stats.percents.learning) }")

//- takes a list of (article, stats) tuples
mixin article_list_w_stats(article_pairs)

	table.table
		thead
			tr
				th= _("title") | capitalize
				th.center= _("comprehension") | capitalize
				th.center
					= _("total") | capitalize
				th.center: h3.title.color-rating-3(style="font-size: 1.4em; line-height: 1em; margin: 0")!= '\u2778'
				th.center: h3.title.color-rating-2(style="font-size: 1.4em; line-height: 1em; margin: 0")!= '\u2777'
				th.center: h3.title.color-rating-1(style="font-size: 1.4em; line-height: 1em; margin: 0")!= '\u2776'
				th
				th
					//- Action
		tbody
			for article, stats in article_pairs
				tr
					td
						a(href=url_for('frontend.articles.article_read', article_id=article.id))= article.title
						//- a(href=url_for('frontend.articles.article_edit', article_id=article.id)) edit
					td
						+vocab_progress_bar(stats)
					td.align-center
						= stats.total_significant
						| &nbsp;
						span.small(style="color: #999") / #{ stats.total }

					for i in [3,2,1]
						td.align-center= "%2.0f%%"|format(stats.percents[i])
					td
						if article.source
							a(href=article.source, target="_blank")
								= _("original")
								|  &rarr;
					td
						a(href=url_for('frontend.articles.article_delete', article_id=article.id)) &times;


mixin article_read_annotated()
	h1.title tODO